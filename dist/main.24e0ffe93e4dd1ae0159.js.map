{"version":3,"file":"main.24e0ffe93e4dd1ae0159.js","mappings":"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","sources":["webpack://onchain-summer-vibes/./src/constants/patternConfig.js","webpack://onchain-summer-vibes/./src/ui/PatternControls.js","webpack://onchain-summer-vibes/./src/ui/ThemeControls.js","webpack://onchain-summer-vibes/./src/ui/ControlPanel.js","webpack://onchain-summer-vibes/./src/patterns/GentlePattern.js","webpack://onchain-summer-vibes/./src/patterns/MandalaPattern.js","webpack://onchain-summer-vibes/./src/patterns/VectorFieldPattern.js","webpack://onchain-summer-vibes/./src/patterns/ShellRidgePattern.js","webpack://onchain-summer-vibes/./src/core/Q5App-minimal.js","webpack://onchain-summer-vibes/./main-new.js"],"sourcesContent":["/**\n * patternConfig.js - Pattern configuration constants\n * \n * JavaScript version of configuration constants for q5.js\n */\n\nexport const PATTERN_TYPES = {\n  INTERFERENCE: \"interference\",\n  GENTLE: \"gentle\",\n  MANDALA: \"mandala\",\n  VECTOR_FIELD: \"vectorfield\",\n  SHELL_RIDGE: \"shellridge\",\n};\n\nexport const DEFAULT_VALUES = {\n  wavelength: 25,\n  speed: 0.018,\n  threshold: 0.12,\n  gradientMode: true,\n  sourceCount: 9,\n  lineDensity: 35,\n  mandalaComplexity: 6,\n  mandalaSpeed: 1.0,\n  tileSize: 55,\n  tileShiftAmplitude: 10,\n  shellRidgeRings: 25,\n  shellRidgeDistortion: 8,\n  strokeEnabled: false,\n  strokeWidth: 3,\n  strokeColor: \"#000000\",\n  colors: {\n    color1: \"#2C3E50\",\n    color2: \"#5DADE2\",\n    color3: \"#F8F9FA\",\n    color4: \"#E8F4FD\",\n  },\n};\n\nexport const VECTOR_FIELD_CONFIG = {\n  numLines: 400,\n  linePoints: 150,\n  lineAlpha: 0.4,\n  lineWidth: 0.5,\n};\n\nexport const THEME_PRESETS = {\n  dawn: {\n    color1: \"#FFE4E1\",\n    color2: \"#FFB6C1\",\n    color3: \"#FFA07A\",\n    color4: \"#FF7F50\",\n  },\n  ocean: {\n    color1: \"#000080\",\n    color2: \"#0066CC\",\n    color3: \"#0099FF\",\n    color4: \"#00CCFF\",\n  },\n  forest: {\n    color1: \"#228B22\",\n    color2: \"#32CD32\",\n    color3: \"#90EE90\",\n    color4: \"#98FB98\",\n  },\n  sunset: {\n    color1: \"#FF4500\",\n    color2: \"#FF6347\",\n    color3: \"#FFD700\",\n    color4: \"#FFFF00\",\n  },\n  midnight: {\n    color1: \"#191970\",\n    color2: \"#483D8B\",\n    color3: \"#6A5ACD\",\n    color4: \"#9370DB\",\n  },\n};\n\nexport const SVG_CONFIG = {\n  width: 334,\n  height: 145,\n  viewBox: \"0 0 334 145\",\n  // Black outline path (thick border around letters)\n  backgroundPath: \"M172.607 2.60026L183.503 13.4805L183.508 20.1911L192.163 20.1855C196.808 20.1824 201.983 21.3632 206.173 24.9826C211.041 21.0891 216.998 18.779 223.606 18.7745C227.424 18.7719 231.493 19.5167 235.162 21.2563L236.275 20.142L244.915 20.1356L244.911 13.4405L255.791 2.54516L272.278 2.53343L283.174 13.4146L283.178 20.2112C283.905 20.1514 284.626 20.123 285.333 20.1225L311.638 20.1055C316.527 20.1022 322.004 21.4088 326.302 25.4916C330.687 29.6581 332.261 35.2062 332.264 40.4261L332.29 77.2901L330.066 79.5158L332.573 82.0198L332.582 95.6364L321.701 106.531L319.881 106.533L319.895 128.34L309.015 139.236L292.528 139.247L287.638 134.363C281.591 138.368 274.117 140.648 266.151 140.653C258.27 140.659 251.024 138.534 245.082 134.505L239.955 139.64L222.754 139.652L217.225 134.131L211.705 139.659L194.504 139.671L188.975 134.15L183.454 139.678L165.541 139.69L160.013 134.169L154.492 139.697L137.29 139.709L131.762 134.188L126.242 139.717L109.04 139.728L106.564 137.255C103.345 138.807 99.8781 139.377 96.6637 139.379L70.3583 139.396C65.9837 139.399 61.1383 138.353 57.0885 135.207C51.1066 139.241 43.6547 140.988 35.9212 140.993C27.3443 140.999 19.4329 138.797 13.2507 134.163C6.95005 129.439 3.03683 122.594 2.1989 114.798L6.95368 109.501C4.57494 105.743 3.33229 101.302 3.329 96.4125C3.32458 89.631 6.0088 83.5797 10.5125 79.0099C4.42753 72.7207 0.740988 63.975 0.734209 53.9952C0.720631 33.7085 15.7615 18.6732 35.242 18.6599C43.0825 18.6547 50.2334 21.0894 55.9763 25.3309C60.2101 21.5101 65.5147 20.2696 70.2648 20.2664L96.5692 20.2483C101.369 20.2451 106.735 21.5055 110.995 25.4143C116.654 21.1947 123.707 18.7499 131.485 18.7447C136.507 18.7413 141.132 19.7312 145.245 21.5131L145.24 13.5064L156.12 2.61101L172.607 2.60026ZM230.488 53.9261C230.489 53.958 230.485 53.9901 230.485 54.0218C230.499 54.0008 230.515 53.9813 230.528 53.9616C230.515 53.9426 230.5 53.9239 230.486 53.9036C230.486 53.9111 230.488 53.9186 230.488 53.9261Z\",\n  // Letter forms path (where patterns fill) - from the white path in your SVG\n  path: \"M35.4171 80.6458C48.3842 80.6371 55.6136 86.9299 57.2872 96.2835L42.2824 96.2943C41.447 93.7014 39.3151 92.2203 35.4249 92.223C31.9055 92.2254 30.0538 93.5236 3167ZM172.0548 95.1907C30.0561 97.0432 31.5386 97.5983 36.2628 98.2435L40.5236 98.7962C49.9719 99.9939 57.6623 103.879 57.6691 113.697C57.6757 123.607 49.2517 130.097 35.9142 130.106C22.3912 130.115 14.0498 123.174 13.0245 113.634L28.215 113.624C29.3286 116.773 32.2008 118.067 35.9982 118.065C39.6105 118.062 41.7407 116.949 41.7394 115.004C41.7376 112.596 38.6803 112.043 34.6046 111.49L30.4357 110.937C20.8022 109.647 14.223 105.39 14.2169 96.4056C14.211 87.5138 22.3574 80.6547 35.4171 80.6458ZM266.664 80.5823C281.669 80.5723 291.032 91.5889 291.041 105.853C291.042 106.501 291.042 106.964 290.858 108.538L256.864 108.562C258.073 114.767 262.335 116.709 266.503 116.706C270.764 116.703 273.171 115.126 274.189 112.995L290.583 112.985C288.274 122.341 278.738 129.757 266.142 129.766C250.859 129.776 241.033 119.223 241.024 105.052C241.015 91.344 250.918 80.5929 266.664 80.5823ZM229.834 81.7318C232.95 81.7297 235.483 82.5553 237.237 84.222C238.995 85.8916 239.921 88.3585 239.923 91.5306L239.948 128.751L222.747 128.763L222.727 98.5814C222.726 97.6421 222.544 97.0353 222.195 96.6595C221.852 96.2901 221.275 96.068 220.303 96.0687L211.677 96.0745L211.698 128.771L194.497 128.783L194.475 96.0862L185.848 96.0921C184.875 96.0928 184.299 96.3149 183.956 96.6849C183.608 97.0612 183.427 97.6683 183.428 98.6077L183.447 128.789L165.534 128.801L165.514 98.6194C165.513 97.68 165.331 97.0733 164.983 96.6976C164.639 96.3281 164.063 96.1062 163.091 96.1068L154.463 96.1126L154.485 128.809L137.283 128.821L137.262 96.1243L128.634 96.1302C127.662 96.131 127.086 96.3531 126.743 96.723C126.395 97.0992 126.214 97.7064 126.215 98.6458L126.235 128.828L109.034 128.839L109.009 91.6185C109.007 88.4466 109.93 85.9789 111.685 84.3069C113.437 82.6379 115.968 81.8092 119.084 81.8069L172.621 81.7708C174.749 81.7694 176.474 81.7574 177.864 81.7669L229.834 81.7318ZM106.376 119.036C106.38 125.242 102.77 128.486 96.6574 128.491L70.3527 128.508C64.2395 128.512 60.6244 125.272 60.6202 119.067L60.5958 82.2034L77.0822 82.1917L77.1027 112.017C77.104 113.962 77.8456 114.887 79.8829 114.886L87.1076 114.881C89.1452 114.88 89.8862 113.953 89.8849 112.008L89.8644 82.1829L106.352 82.1722L106.376 119.036ZM321.693 95.6429L311.763 95.6497C309.725 95.6511 308.985 96.5779 308.986 98.5228L309.006 128.348L292.52 128.359L292.494 91.4944C292.49 85.2889 296.101 82.0445 302.214 82.0403L321.684 82.0276L321.693 95.6429ZM266.395 92.9017C262.134 92.9045 258.338 95.2227 257.23 99.6693L275.291 99.6575C274.269 95.1197 270.748 92.8988 266.395 92.9017ZM113.713 83.305C113.698 83.3127 113.684 83.3216 113.669 83.3294C113.709 83.3084 113.75 83.2883 113.79 83.2679C113.765 83.2807 113.738 83.2919 113.713 83.305ZM114.986 82.7708C114.972 82.7757 114.957 82.7815 114.943 82.7864C114.98 82.7736 115.019 82.7608 115.057 82.7484C115.033 82.756 115.01 82.763 114.986 82.7708ZM116.912 82.3167C116.877 82.322 116.841 82.3287 116.806 82.3343C116.865 82.3251 116.924 82.3154 116.984 82.3069L116.912 82.3167ZM172.621 82.1273L119.085 82.1634V82.1644L172.621 82.1282C173.965 82.1273 175.146 82.1239 176.181 82.1224C175.146 82.1234 173.965 82.1264 172.621 82.1273ZM177.813 82.1243C177.856 82.1246 177.9 82.125 177.943 82.1253L229.835 82.0901C230.026 82.09 230.215 82.0927 230.401 82.0989L229.835 82.0892L177.813 82.1243ZM35.2492 29.5482C48.5755 29.5392 58.9853 39.54 58.9952 53.9554C59.0049 68.2791 48.6087 78.3867 35.2824 78.3958C21.9559 78.4048 11.6318 68.3114 11.6222 53.9876C11.6125 39.572 21.9228 29.5572 35.2492 29.5482ZM131.489 29.6321C143.71 29.6239 152.433 38.0397 154.15 49.5726L139.109 49.5823C137.996 46.4709 135.431 44.3671 131.671 44.3694C126.971 44.3726 123.384 48.2198 123.388 53.9866C123.392 59.6621 126.898 63.5963 131.684 63.5931C135.358 63.5905 138.092 61.3917 139.2 58.2786L154.411 58.2689C152.881 69.6206 143.999 78.323 131.523 78.3314C118.362 78.3402 108.101 68.4606 108.091 53.9974C108.081 39.7173 118.329 29.6412 131.489 29.6321ZM223.614 29.6624C228.431 29.6592 232.358 31.3989 234.322 34.2405L236.284 34.2396L236.282 31.0296L252.161 31.0189L252.192 76.8743L236.492 76.8851L236.489 72.7581L234.526 72.7591C232.299 76.3372 228.197 78.2662 222.845 78.2698C212.051 78.2771 203.838 69.0198 203.828 54.4378C203.818 39.5808 213.534 29.6694 223.614 29.6624ZM96.5773 31.136C102.69 31.1321 106.305 34.3718 106.309 40.5775L106.333 77.4417L89.8468 77.4525L89.8263 47.6273C89.8249 45.6825 89.0835 44.7568 87.046 44.7581L79.8214 44.763C77.7838 44.7644 77.0428 45.6911 77.0441 47.636L77.0646 77.4612L60.5773 77.472L60.5529 40.6077C60.5488 34.4022 64.1587 31.1578 70.2716 31.1536L96.5773 31.136ZM172.629 31.0862L192.172 31.0726C198.285 31.0685 201.899 34.3083 201.903 40.514L201.929 77.3782L185.442 77.389L185.422 47.5648C185.421 45.6197 184.678 44.6933 182.641 44.6946L172.638 44.7015L172.659 77.3978L156.173 77.4085L156.13 13.4993L172.616 13.4876L172.629 31.0862ZM272.328 77.3304L255.842 77.3411L255.811 31.0296L272.298 31.0189L272.328 77.3304ZM311.646 30.9935C317.759 30.9895 321.373 34.2292 321.377 40.4349L321.401 77.2991L304.915 77.3099L304.895 47.4847C304.893 45.54 304.152 44.6142 302.114 44.6155L294.89 44.6204C292.852 44.6218 292.111 45.5486 292.112 47.4935L292.133 77.3187L275.646 77.3294L275.621 40.4651C275.617 34.2597 279.227 31.0153 285.34 31.011L311.646 30.9935ZM35.2589 44.3304C30.5303 44.3337 27.0079 48.1015 27.0118 53.9778C27.0159 59.7622 30.544 63.6158 35.2726 63.6126C40.0011 63.6092 43.6095 59.7506 43.6056 53.9661C43.6016 48.0897 39.9876 44.3272 35.2589 44.3304ZM228.353 44.3333C223.268 44.3367 219.791 48.2822 219.795 53.9681C219.799 59.6541 223.281 63.5955 228.365 63.5921C233.539 63.5886 236.748 59.2764 236.744 53.9573C236.741 48.6382 233.526 44.33 228.353 44.3333ZM272.295 26.7581L255.808 26.7689L255.799 13.431L272.285 13.4202L272.295 26.7581Z\",\n};","/**\n * PatternControls.js - Pattern-Specific Controls\n * \n * JavaScript implementation of pattern controls with dynamic UI\n * Based on the original React TypeScript PatternControls component\n */\n\nimport { PATTERN_TYPES, DEFAULT_VALUES } from '../constants/patternConfig.js';\n\nexport class PatternControls {\n    constructor(app) {\n        this.app = app;\n        this.element = null;\n        this.currentPattern = PATTERN_TYPES.INTERFERENCE;\n        this.controls = {};\n        \n        this.initializeUI();\n        this.bindEvents();\n        \n        console.log('PatternControls initialized');\n    }\n    \n    /**\n     * Initialize the UI elements\n     */\n    initializeUI() {\n        this.element = document.createElement('div');\n        this.element.className = 'pattern-controls';\n        \n        // Create pattern type selector\n        this.createPatternSelector();\n        \n        // Create parameter controls\n        this.createParameterControls();\n        \n        // Apply styles\n        this.applyStyles();\n        \n        // Update initial state\n        this.updateControlsVisibility();\n    }\n    \n    /**\n     * Create pattern type selector buttons\n     */\n    createPatternSelector() {\n        const selectorContainer = document.createElement('div');\n        selectorContainer.className = 'pattern-selector';\n        \n        const patterns = [\n            { type: PATTERN_TYPES.INTERFERENCE, label: 'Interference', emoji: '🌊' },\n            { type: PATTERN_TYPES.GENTLE, label: 'Gentle', emoji: '🌸' },\n            { type: PATTERN_TYPES.MANDALA, label: 'Mandala', emoji: '🔮' },\n            { type: PATTERN_TYPES.VECTOR_FIELD, label: 'Vector Field', emoji: '🌀' },\n            { type: PATTERN_TYPES.SHELL_RIDGE, label: 'Shell Ridge', emoji: '🐚' },\n            { type: PATTERN_TYPES.CONTOUR_INTERFERENCE, label: 'Contour Interference', emoji: '🎯' }\n        ];\n        \n        patterns.forEach(pattern => {\n            const button = document.createElement('button');\n            button.className = 'pattern-button';\n            button.innerHTML = `${pattern.emoji} ${pattern.label}`;\n            button.dataset.pattern = pattern.type;\n            button.title = `Switch to ${pattern.label} pattern`;\n            \n            if (pattern.type === this.currentPattern) {\n                button.classList.add('active');\n            }\n            \n            button.addEventListener('click', () => {\n                this.selectPattern(pattern.type);\n            });\n            \n            selectorContainer.appendChild(button);\n        });\n        \n        this.element.appendChild(selectorContainer);\n    }\n    \n    /**\n     * Create parameter controls\n     */\n    createParameterControls() {\n        const controlsContainer = document.createElement('div');\n        controlsContainer.className = 'parameter-controls';\n        \n        // Define all possible controls\n        const controlDefinitions = [\n            {\n                key: 'wavelength',\n                label: 'Wavelength',\n                type: 'range',\n                min: 10,\n                max: 100,\n                step: 1,\n                patterns: [PATTERN_TYPES.INTERFERENCE, PATTERN_TYPES.GENTLE, PATTERN_TYPES.SHELL_RIDGE]\n            },\n            {\n                key: 'speed',\n                label: 'Animation Speed',\n                type: 'range',\n                min: 0.001,\n                max: 0.1,\n                step: 0.001,\n                patterns: [PATTERN_TYPES.INTERFERENCE, PATTERN_TYPES.GENTLE, PATTERN_TYPES.MANDALA, PATTERN_TYPES.VECTOR_FIELD, PATTERN_TYPES.SHELL_RIDGE]\n            },\n            {\n                key: 'threshold',\n                label: 'Threshold',\n                type: 'range',\n                min: 0.01,\n                max: 0.5,\n                step: 0.01,\n                patterns: [PATTERN_TYPES.INTERFERENCE, PATTERN_TYPES.GENTLE]\n            },\n            {\n                key: 'gradientMode',\n                label: 'Gradient Mode',\n                type: 'checkbox',\n                patterns: [PATTERN_TYPES.INTERFERENCE, PATTERN_TYPES.GENTLE, PATTERN_TYPES.SHELL_RIDGE]\n            },\n            {\n                key: 'sourceCount',\n                label: 'Wave Sources',\n                type: 'range',\n                min: 1,\n                max: 20,\n                step: 1,\n                patterns: [PATTERN_TYPES.INTERFERENCE]\n            },\n            {\n                key: 'lineDensity',\n                label: 'Line Density',\n                type: 'range',\n                min: 10,\n                max: 100,\n                step: 1,\n                patterns: [PATTERN_TYPES.GENTLE]\n            },\n            {\n                key: 'mandalaComplexity',\n                label: 'Complexity',\n                type: 'range',\n                min: 2,\n                max: 20,\n                step: 1,\n                patterns: [PATTERN_TYPES.MANDALA]\n            },\n            {\n                key: 'mandalaSpeed',\n                label: 'Rotation Speed',\n                type: 'range',\n                min: 0.1,\n                max: 5.0,\n                step: 0.1,\n                patterns: [PATTERN_TYPES.MANDALA]\n            },\n            {\n                key: 'tileSize',\n                label: 'Tile Size',\n                type: 'range',\n                min: 20,\n                max: 200,\n                step: 5,\n                patterns: [PATTERN_TYPES.VECTOR_FIELD]\n            },\n            {\n                key: 'tileShiftAmplitude',\n                label: 'Tile Shift',\n                type: 'range',\n                min: 0,\n                max: 50,\n                step: 1,\n                patterns: [PATTERN_TYPES.VECTOR_FIELD]\n            },\n            {\n                key: 'shellRidgeRings',\n                label: 'Ridge Rings',\n                type: 'range',\n                min: 5,\n                max: 50,\n                step: 1,\n                patterns: [PATTERN_TYPES.SHELL_RIDGE]\n            },\n            {\n                key: 'shellRidgeDistortion',\n                label: 'Distortion',\n                type: 'range',\n                min: 1,\n                max: 20,\n                step: 1,\n                patterns: [PATTERN_TYPES.SHELL_RIDGE]\n            },\n            {\n                key: 'resolution',\n                label: 'Grid Resolution',\n                type: 'range',\n                min: 1,\n                max: 10,\n                step: 0.5,\n                patterns: [PATTERN_TYPES.CONTOUR_INTERFERENCE]\n            },\n            {\n                key: 'numRings',\n                label: 'Wave Rings',\n                type: 'range',\n                min: 1,\n                max: 5,\n                step: 1,\n                patterns: [PATTERN_TYPES.CONTOUR_INTERFERENCE]\n            },\n            {\n                key: 'sourcesPerRing',\n                label: 'Sources per Ring',\n                type: 'range',\n                min: 3,\n                max: 12,\n                step: 1,\n                patterns: [PATTERN_TYPES.CONTOUR_INTERFERENCE]\n            },\n            {\n                key: 'lineWidth',\n                label: 'Line Width',\n                type: 'range',\n                min: 0.2,\n                max: 2.0,\n                step: 0.1,\n                patterns: [PATTERN_TYPES.CONTOUR_INTERFERENCE]\n            }\n        ];\n        \n        // Create controls for each parameter\n        controlDefinitions.forEach(def => {\n            const control = this.createControl(def);\n            controlsContainer.appendChild(control);\n            \n            // Store reference for easy access\n            this.controls[def.key] = {\n                element: control,\n                definition: def,\n                input: control.querySelector('input'),\n                valueDisplay: control.querySelector('.value-display')\n            };\n        });\n        \n        this.element.appendChild(controlsContainer);\n    }\n    \n    /**\n     * Create individual control element\n     */\n    createControl(definition) {\n        const controlDiv = document.createElement('div');\n        controlDiv.className = 'parameter-control';\n        controlDiv.dataset.parameter = definition.key;\n        \n        const label = document.createElement('label');\n        label.className = 'control-label';\n        label.textContent = definition.label;\n        \n        const inputContainer = document.createElement('div');\n        inputContainer.className = 'input-container';\n        \n        let input;\n        let valueDisplay;\n        \n        if (definition.type === 'range') {\n            input = document.createElement('input');\n            input.type = 'range';\n            input.min = definition.min;\n            input.max = definition.max;\n            input.step = definition.step;\n            input.value = DEFAULT_VALUES[definition.key] || definition.min;\n            input.className = 'range-input';\n            \n            valueDisplay = document.createElement('span');\n            valueDisplay.className = 'value-display';\n            valueDisplay.textContent = input.value;\n            \n            input.addEventListener('input', (e) => {\n                const value = parseFloat(e.target.value);\n                valueDisplay.textContent = value;\n                this.updateParameter(definition.key, value);\n            });\n            \n            inputContainer.appendChild(input);\n            inputContainer.appendChild(valueDisplay);\n            \n        } else if (definition.type === 'checkbox') {\n            input = document.createElement('input');\n            input.type = 'checkbox';\n            input.checked = DEFAULT_VALUES[definition.key] || false;\n            input.className = 'checkbox-input';\n            \n            input.addEventListener('change', (e) => {\n                this.updateParameter(definition.key, e.target.checked);\n            });\n            \n            inputContainer.appendChild(input);\n        }\n        \n        controlDiv.appendChild(label);\n        controlDiv.appendChild(inputContainer);\n        \n        return controlDiv;\n    }\n    \n    /**\n     * Apply CSS styles (Apple-like minimal design)\n     */\n    applyStyles() {\n        const style = document.createElement('style');\n        style.textContent = `\n            .pattern-controls {\n                color: #1d1d1f;\n            }\n            \n            /* Pattern Selector */\n            .pattern-selector {\n                display: flex;\n                flex-direction: column;\n                gap: 8px;\n                margin-bottom: 24px;\n            }\n            \n            .pattern-button {\n                padding: 12px 16px;\n                background: rgba(0, 0, 0, 0.03);\n                border: 1px solid rgba(0, 0, 0, 0.08);\n                border-radius: 8px;\n                color: #1d1d1f;\n                cursor: pointer;\n                transition: all 0.2s ease;\n                font-size: 15px;\n                font-weight: 500;\n                text-align: left;\n                backdrop-filter: blur(10px);\n                -webkit-backdrop-filter: blur(10px);\n            }\n            \n            .pattern-button:hover {\n                background: rgba(0, 0, 0, 0.05);\n                border-color: rgba(0, 0, 0, 0.12);\n                transform: translateY(-1px);\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n            }\n            \n            .pattern-button.active {\n                background: rgba(0, 122, 255, 0.1);\n                border-color: rgba(0, 122, 255, 0.3);\n                color: #007aff;\n                box-shadow: 0 2px 12px rgba(0, 122, 255, 0.2);\n            }\n            \n            /* Parameter Controls */\n            .parameter-controls {\n                display: flex;\n                flex-direction: column;\n                gap: 16px;\n            }\n            \n            .parameter-control {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 12px 0;\n                border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n                transition: opacity 0.3s ease;\n            }\n            \n            .parameter-control.hidden {\n                display: none;\n            }\n            \n            .control-label {\n                font-size: 15px;\n                font-weight: 500;\n                color: #1d1d1f;\n                min-width: 100px;\n                margin-right: 16px;\n            }\n            \n            .input-container {\n                display: flex;\n                align-items: center;\n                gap: 12px;\n                flex: 1;\n                justify-content: flex-end;\n            }\n            \n            /* Range Input */\n            .range-input {\n                width: 120px;\n                height: 4px;\n                background: rgba(0, 0, 0, 0.1);\n                border-radius: 2px;\n                outline: none;\n                appearance: none;\n                cursor: pointer;\n            }\n            \n            .range-input::-webkit-slider-thumb {\n                appearance: none;\n                width: 20px;\n                height: 20px;\n                background: white;\n                border: 2px solid #007aff;\n                border-radius: 50%;\n                cursor: pointer;\n                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n                transition: all 0.2s ease;\n            }\n            \n            .range-input::-webkit-slider-thumb:hover {\n                transform: scale(1.1);\n                box-shadow: 0 4px 12px rgba(0, 122, 255, 0.3);\n            }\n            \n            .range-input::-moz-range-thumb {\n                width: 20px;\n                height: 20px;\n                background: white;\n                border: 2px solid #007aff;\n                border-radius: 50%;\n                cursor: pointer;\n                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n            }\n            \n            .value-display {\n                font-size: 13px;\n                color: #86868b;\n                min-width: 40px;\n                text-align: right;\n                font-family: -apple-system, BlinkMacSystemFont, 'SF Mono', Monaco, monospace;\n                font-weight: 500;\n            }\n            \n            /* Checkbox Input */\n            .checkbox-input {\n                width: 20px;\n                height: 20px;\n                accent-color: #007aff;\n                cursor: pointer;\n                border-radius: 4px;\n            }\n            \n            /* Responsive Design */\n            @media (max-width: 768px) {\n                .pattern-selector {\n                    gap: 6px;\n                }\n                \n                .pattern-button {\n                    padding: 10px 14px;\n                    font-size: 14px;\n                }\n                \n                .parameter-control {\n                    flex-direction: column;\n                    align-items: flex-start;\n                    gap: 8px;\n                    padding: 10px 0;\n                }\n                \n                .input-container {\n                    width: 100%;\n                    justify-content: space-between;\n                }\n                \n                .range-input {\n                    width: 150px;\n                }\n                \n                .control-label {\n                    font-size: 14px;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Bind event listeners\n     */\n    bindEvents() {\n        // Pattern selection events are handled in createPatternSelector\n        // Parameter change events are handled in createControl\n    }\n    \n    /**\n     * Select pattern type\n     */\n    selectPattern(patternType) {\n        this.currentPattern = patternType;\n        \n        // Update button states\n        const buttons = this.element.querySelectorAll('.pattern-button');\n        buttons.forEach(button => {\n            button.classList.toggle('active', button.dataset.pattern === patternType);\n        });\n        \n        // Update controls visibility\n        this.updateControlsVisibility();\n        \n        // Update app\n        this.app.updateParameter('patternType', patternType);\n        \n        console.log(`Pattern selected: ${patternType}`);\n    }\n    \n    /**\n     * Update parameter value\n     */\n    updateParameter(key, value) {\n        // Update app\n        this.app.updateParameter(key, value);\n        \n        console.log(`Parameter updated: ${key} = ${value}`);\n    }\n    \n    /**\n     * Update controls visibility based on selected pattern\n     */\n    updateControlsVisibility() {\n        Object.entries(this.controls).forEach(([key, control]) => {\n            const isVisible = control.definition.patterns.includes(this.currentPattern);\n            control.element.classList.toggle('hidden', !isVisible);\n        });\n    }\n    \n    /**\n     * Update control values from app state\n     */\n    update() {\n        // Update pattern selection\n        const currentPattern = this.app.getParameter('patternType') || PATTERN_TYPES.INTERFERENCE;\n        if (currentPattern !== this.currentPattern) {\n            this.selectPattern(currentPattern);\n        }\n        \n        // Update parameter values\n        Object.entries(this.controls).forEach(([key, control]) => {\n            const value = this.app.getParameter(key);\n            if (value !== undefined) {\n                if (control.input.type === 'range') {\n                    control.input.value = value;\n                    if (control.valueDisplay) {\n                        control.valueDisplay.textContent = value;\n                    }\n                } else if (control.input.type === 'checkbox') {\n                    control.input.checked = value;\n                }\n            }\n        });\n    }\n    \n    /**\n     * Get current state\n     */\n    getState() {\n        return {\n            currentPattern: this.currentPattern,\n            parameters: Object.fromEntries(\n                Object.entries(this.controls).map(([key, control]) => [\n                    key,\n                    control.input.type === 'checkbox' ? control.input.checked : parseFloat(control.input.value)\n                ])\n            )\n        };\n    }\n    \n    /**\n     * Get the main element\n     */\n    getElement() {\n        return this.element;\n    }\n    \n    /**\n     * Cleanup\n     */\n    destroy() {\n        // Remove event listeners (they're on elements that will be removed)\n        this.element?.remove();\n        \n        console.log('PatternControls destroyed');\n    }\n}\n\nexport default PatternControls;","/**\n * ThemeControls.js - Color Theme Management\n * \n * JavaScript implementation of theme controls with color pickers and presets\n * Based on the original React TypeScript ThemeControls component\n */\n\nimport { THEME_PRESETS, DEFAULT_VALUES } from '../constants/patternConfig.js';\n\nexport class ThemeControls {\n    constructor(app) {\n        this.app = app;\n        this.element = null;\n        this.colorInputs = {};\n        this.currentColors = { ...DEFAULT_VALUES.colors };\n        \n        this.initializeUI();\n        this.bindEvents();\n        \n        console.log('ThemeControls initialized');\n    }\n    \n    /**\n     * Initialize the UI elements\n     */\n    initializeUI() {\n        this.element = document.createElement('div');\n        this.element.className = 'theme-controls';\n        \n        // Create theme preset buttons\n        this.createThemePresets();\n        \n        // Create color pickers\n        this.createColorPickers();\n        \n        // Apply styles\n        this.applyStyles();\n    }\n    \n    /**\n     * Create theme preset buttons\n     */\n    createThemePresets() {\n        const presetsContainer = document.createElement('div');\n        presetsContainer.className = 'theme-presets';\n        \n        const presetsLabel = document.createElement('h4');\n        presetsLabel.textContent = 'Theme Presets';\n        presetsLabel.className = 'presets-label';\n        \n        const presetsGrid = document.createElement('div');\n        presetsGrid.className = 'presets-grid';\n        \n        // Define preset buttons with emojis and colors\n        const presets = [\n            { key: 'dawn', label: 'Dawn', emoji: '🌅', colors: THEME_PRESETS.dawn },\n            { key: 'ocean', label: 'Ocean', emoji: '🌊', colors: THEME_PRESETS.ocean },\n            { key: 'forest', label: 'Forest', emoji: '🌲', colors: THEME_PRESETS.forest },\n            { key: 'sunset', label: 'Sunset', emoji: '🌇', colors: THEME_PRESETS.sunset },\n            { key: 'midnight', label: 'Midnight', emoji: '🌙', colors: THEME_PRESETS.midnight }\n        ];\n        \n        presets.forEach(preset => {\n            const button = document.createElement('button');\n            button.className = 'preset-button';\n            button.innerHTML = `\n                <span class=\"preset-emoji\">${preset.emoji}</span>\n                <span class=\"preset-label\">${preset.label}</span>\n            `;\n            button.title = `Apply ${preset.label} theme`;\n            button.dataset.preset = preset.key;\n            \n            // Create color preview\n            const preview = document.createElement('div');\n            preview.className = 'preset-preview';\n            preview.style.background = `linear-gradient(45deg, ${preset.colors.color1}, ${preset.colors.color2}, ${preset.colors.color3}, ${preset.colors.color4})`;\n            \n            button.appendChild(preview);\n            \n            button.addEventListener('click', () => {\n                this.applyThemePreset(preset.key);\n            });\n            \n            presetsGrid.appendChild(button);\n        });\n        \n        presetsContainer.appendChild(presetsLabel);\n        presetsContainer.appendChild(presetsGrid);\n        this.element.appendChild(presetsContainer);\n    }\n    \n    /**\n     * Create color picker controls\n     */\n    createColorPickers() {\n        const pickersContainer = document.createElement('div');\n        pickersContainer.className = 'color-pickers';\n        \n        const pickersLabel = document.createElement('h4');\n        pickersLabel.textContent = 'Custom Colors';\n        pickersLabel.className = 'pickers-label';\n        \n        const pickersGrid = document.createElement('div');\n        pickersGrid.className = 'pickers-grid';\n        \n        // Define color inputs\n        const colorDefinitions = [\n            { key: 'color1', label: 'Primary', position: 'top-left' },\n            { key: 'color2', label: 'Secondary', position: 'top-right' },\n            { key: 'color3', label: 'Accent', position: 'bottom-left' },\n            { key: 'color4', label: 'Background', position: 'bottom-right' }\n        ];\n        \n        colorDefinitions.forEach(colorDef => {\n            const colorControl = document.createElement('div');\n            colorControl.className = 'color-control';\n            \n            const label = document.createElement('label');\n            label.className = 'color-label';\n            label.textContent = colorDef.label;\n            \n            const inputContainer = document.createElement('div');\n            inputContainer.className = 'color-input-container';\n            \n            const colorInput = document.createElement('input');\n            colorInput.type = 'color';\n            colorInput.className = 'color-input';\n            colorInput.value = this.currentColors[colorDef.key];\n            colorInput.title = `Select ${colorDef.label} color`;\n            \n            const colorValue = document.createElement('span');\n            colorValue.className = 'color-value';\n            colorValue.textContent = this.currentColors[colorDef.key];\n            \n            colorInput.addEventListener('input', (e) => {\n                const value = e.target.value;\n                colorValue.textContent = value;\n                this.updateColor(colorDef.key, value);\n            });\n            \n            inputContainer.appendChild(colorInput);\n            inputContainer.appendChild(colorValue);\n            \n            colorControl.appendChild(label);\n            colorControl.appendChild(inputContainer);\n            \n            pickersGrid.appendChild(colorControl);\n            \n            // Store reference\n            this.colorInputs[colorDef.key] = {\n                input: colorInput,\n                value: colorValue,\n                control: colorControl\n            };\n        });\n        \n        pickersContainer.appendChild(pickersLabel);\n        pickersContainer.appendChild(pickersGrid);\n        this.element.appendChild(pickersContainer);\n    }\n    \n    /**\n     * Apply CSS styles (Apple-like minimal design)\n     */\n    applyStyles() {\n        const style = document.createElement('style');\n        style.textContent = `\n            .theme-controls {\n                color: #1d1d1f;\n            }\n            \n            .presets-label,\n            .pickers-label {\n                margin: 0 0 16px 0;\n                font-size: 17px;\n                font-weight: 600;\n                color: #1d1d1f;\n                text-transform: none;\n                letter-spacing: -0.2px;\n            }\n            \n            /* Theme Presets */\n            .theme-presets {\n                margin-bottom: 28px;\n            }\n            \n            .presets-grid {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));\n                gap: 8px;\n            }\n            \n            .preset-button {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                padding: 12px 8px;\n                background: rgba(0, 0, 0, 0.03);\n                border: 1px solid rgba(0, 0, 0, 0.08);\n                border-radius: 8px;\n                color: #1d1d1f;\n                cursor: pointer;\n                transition: all 0.2s ease;\n                overflow: hidden;\n                backdrop-filter: blur(10px);\n                -webkit-backdrop-filter: blur(10px);\n            }\n            \n            .preset-button:hover {\n                background: rgba(0, 0, 0, 0.05);\n                border-color: rgba(0, 0, 0, 0.12);\n                transform: translateY(-1px);\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n            }\n            \n            .preset-button:active {\n                transform: translateY(0);\n            }\n            \n            .preset-emoji {\n                font-size: 18px;\n                margin-bottom: 4px;\n            }\n            \n            .preset-label {\n                font-size: 12px;\n                font-weight: 500;\n                text-align: center;\n                position: relative;\n                z-index: 1;\n            }\n            \n            .preset-preview {\n                position: absolute;\n                bottom: 0;\n                left: 0;\n                right: 0;\n                height: 3px;\n                opacity: 0.8;\n                transition: all 0.2s ease;\n            }\n            \n            .preset-button:hover .preset-preview {\n                opacity: 1;\n                height: 4px;\n            }\n            \n            /* Color Pickers */\n            .color-pickers {\n                margin-bottom: 20px;\n            }\n            \n            .pickers-grid {\n                display: grid;\n                grid-template-columns: 1fr 1fr;\n                gap: 16px;\n            }\n            \n            .color-control {\n                display: flex;\n                flex-direction: column;\n                gap: 8px;\n            }\n            \n            .color-label {\n                font-size: 13px;\n                font-weight: 500;\n                color: #1d1d1f;\n            }\n            \n            .color-input-container {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n            }\n            \n            .color-input {\n                width: 44px;\n                height: 44px;\n                border: 1px solid rgba(0, 0, 0, 0.1);\n                border-radius: 8px;\n                cursor: pointer;\n                background: none;\n                transition: all 0.2s ease;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n            }\n            \n            .color-input:hover {\n                border-color: rgba(0, 0, 0, 0.2);\n                transform: scale(1.05);\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n            }\n            \n            .color-input::-webkit-color-swatch-wrapper {\n                padding: 4px;\n            }\n            \n            .color-input::-webkit-color-swatch {\n                border: none;\n                border-radius: 4px;\n            }\n            \n            .color-input::-moz-color-swatch {\n                border: none;\n                border-radius: 4px;\n            }\n            \n            .color-value {\n                font-size: 11px;\n                font-family: -apple-system, BlinkMacSystemFont, 'SF Mono', Monaco, monospace;\n                color: #86868b;\n                background: rgba(0, 0, 0, 0.03);\n                padding: 6px 8px;\n                border-radius: 6px;\n                flex: 1;\n                text-align: center;\n                text-transform: uppercase;\n                font-weight: 500;\n                border: 1px solid rgba(0, 0, 0, 0.05);\n            }\n            \n            /* Responsive Design */\n            @media (max-width: 768px) {\n                .presets-grid {\n                    grid-template-columns: repeat(3, 1fr);\n                    gap: 6px;\n                }\n                \n                .preset-button {\n                    padding: 10px 6px;\n                }\n                \n                .preset-emoji {\n                    font-size: 16px;\n                }\n                \n                .preset-label {\n                    font-size: 11px;\n                }\n                \n                .pickers-grid {\n                    grid-template-columns: 1fr;\n                    gap: 12px;\n                }\n                \n                .color-input-container {\n                    flex-direction: row;\n                    align-items: center;\n                }\n                \n                .color-input {\n                    width: 36px;\n                    height: 36px;\n                }\n                \n                .color-value {\n                    font-size: 10px;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Bind event listeners\n     */\n    bindEvents() {\n        // Events are handled in the create methods\n    }\n    \n    /**\n     * Apply theme preset\n     */\n    applyThemePreset(presetKey) {\n        const preset = THEME_PRESETS[presetKey];\n        if (!preset) {\n            console.warn(`Theme preset not found: ${presetKey}`);\n            return;\n        }\n        \n        // Update current colors\n        this.currentColors = { ...preset };\n        \n        // Update color inputs\n        Object.entries(preset).forEach(([key, color]) => {\n            if (this.colorInputs[key]) {\n                this.colorInputs[key].input.value = color;\n                this.colorInputs[key].value.textContent = color;\n            }\n        });\n        \n        // Update app with all colors\n        this.app.updateParameter('colors', this.currentColors);\n        \n        console.log(`Theme preset applied: ${presetKey}`, preset);\n    }\n    \n    /**\n     * Update individual color\n     */\n    updateColor(colorKey, value) {\n        this.currentColors[colorKey] = value;\n        \n        // Update app with updated colors\n        this.app.updateParameter('colors', this.currentColors);\n        \n        console.log(`Color updated: ${colorKey} = ${value}`);\n    }\n    \n    /**\n     * Update controls from app state\n     */\n    update() {\n        const appColors = this.app.getParameter('colors');\n        if (appColors) {\n            this.currentColors = { ...appColors };\n            \n            // Update color inputs\n            Object.entries(this.currentColors).forEach(([key, color]) => {\n                if (this.colorInputs[key]) {\n                    this.colorInputs[key].input.value = color;\n                    this.colorInputs[key].value.textContent = color;\n                }\n            });\n        }\n    }\n    \n    /**\n     * Get current state\n     */\n    getState() {\n        return {\n            currentColors: { ...this.currentColors }\n        };\n    }\n    \n    /**\n     * Get the main element\n     */\n    getElement() {\n        return this.element;\n    }\n    \n    /**\n     * Cleanup\n     */\n    destroy() {\n        // Remove event listeners (they're on elements that will be removed)\n        this.element?.remove();\n        \n        console.log('ThemeControls destroyed');\n    }\n}\n\nexport default ThemeControls;","/**\n * ControlPanel.js - Main Control Panel Container\n * \n * JavaScript implementation of the collapsible sidebar control panel\n * Based on the original React TypeScript ControlPanel component\n */\n\nimport { PatternControls } from './PatternControls.js';\nimport { ThemeControls } from './ThemeControls.js';\n\nexport class ControlPanel {\n    constructor(app) {\n        this.app = app;\n        this.isOpen = false;\n        this.panel = null;\n        this.toggleButton = null;\n        this.backdrop = null;\n        this.patternControls = null;\n        this.themeControls = null;\n        \n        this.initializeUI();\n        this.bindEvents();\n        \n        console.log('ControlPanel initialized');\n    }\n    \n    /**\n     * Initialize the UI elements\n     */\n    initializeUI() {\n        // Create toggle button\n        this.createToggleButton();\n        \n        // Create backdrop\n        this.createBackdrop();\n        \n        // Create main panel\n        this.createMainPanel();\n        \n        // Create sub-components\n        this.createSubComponents();\n        \n        // Apply initial styles\n        this.applyStyles();\n    }\n    \n    /**\n     * Create toggle button (simplified for side-by-side layout)\n     */\n    createToggleButton() {\n        // For side-by-side layout, we don't need a toggle button\n        // The panel will always be visible\n        this.toggleButton = document.createElement('div');\n        this.toggleButton.id = 'controlToggle';\n        this.toggleButton.style.display = 'none';\n    }\n    \n    /**\n     * Create backdrop overlay (not needed for side-by-side layout)\n     */\n    createBackdrop() {\n        this.backdrop = document.createElement('div');\n        this.backdrop.id = 'controlBackdrop';\n        this.backdrop.style.display = 'none';\n    }\n    \n    /**\n     * Create main panel (side-by-side layout)\n     */\n    createMainPanel() {\n        this.panel = document.createElement('div');\n        this.panel.id = 'controlPanel';\n        this.panel.setAttribute('role', 'complementary');\n        this.panel.setAttribute('aria-label', 'Pattern Controls');\n        \n        // Create header\n        const header = document.createElement('div');\n        header.className = 'control-header';\n        \n        const title = document.createElement('h1');\n        title.textContent = 'Controls';\n        title.className = 'control-title';\n        \n        header.appendChild(title);\n        \n        // Create content area\n        const content = document.createElement('div');\n        content.className = 'control-content';\n        content.id = 'controlContent';\n        \n        this.panel.appendChild(header);\n        this.panel.appendChild(content);\n        \n        document.body.appendChild(this.panel);\n    }\n    \n    /**\n     * Create sub-components\n     */\n    createSubComponents() {\n        const content = document.getElementById('controlContent');\n        \n        // Pattern Controls Section\n        const patternSection = document.createElement('div');\n        patternSection.className = 'control-section';\n        \n        const patternHeader = document.createElement('h3');\n        patternHeader.textContent = 'Pattern Type';\n        patternHeader.className = 'section-header';\n        \n        patternSection.appendChild(patternHeader);\n        \n        this.patternControls = new PatternControls(this.app);\n        patternSection.appendChild(this.patternControls.getElement());\n        \n        // Theme Controls Section\n        const themeSection = document.createElement('div');\n        themeSection.className = 'control-section';\n        \n        const themeHeader = document.createElement('h3');\n        themeHeader.textContent = 'Color Theme';\n        themeHeader.className = 'section-header';\n        \n        themeSection.appendChild(themeHeader);\n        \n        this.themeControls = new ThemeControls(this.app);\n        themeSection.appendChild(this.themeControls.getElement());\n        \n        // Add sections to content\n        content.appendChild(patternSection);\n        content.appendChild(themeSection);\n    }\n    \n    /**\n     * Apply CSS styles (Apple-like minimal design)\n     */\n    applyStyles() {\n        const style = document.createElement('style');\n        style.textContent = `\n            /* Global Layout */\n            body {\n                margin: 0;\n                padding: 0;\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;\n                background: #f5f5f7;\n                display: flex;\n                height: 100vh;\n                overflow: hidden;\n            }\n            \n            /* Canvas Container */\n            #artCanvas {\n                flex: 1;\n                border: none;\n                background: white;\n                border-radius: 12px;\n                margin: 16px;\n                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n                display: block !important;\n            }\n            \n            /* Side Panel */\n            #controlPanel {\n                width: 320px;\n                height: 100vh;\n                background: rgba(255, 255, 255, 0.8);\n                backdrop-filter: blur(40px);\n                -webkit-backdrop-filter: blur(40px);\n                border-left: 1px solid rgba(255, 255, 255, 0.2);\n                overflow-y: auto;\n                overflow-x: hidden;\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                z-index: 1000;\n            }\n            \n            /* Header */\n            .control-header {\n                padding: 32px 24px 24px 24px;\n                border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n                background: rgba(255, 255, 255, 0.1);\n                backdrop-filter: blur(40px);\n                -webkit-backdrop-filter: blur(40px);\n                position: sticky;\n                top: 0;\n                z-index: 10;\n            }\n            \n            .control-title {\n                margin: 0;\n                color: #1d1d1f;\n                font-size: 28px;\n                font-weight: 600;\n                letter-spacing: -0.5px;\n            }\n            \n            /* Content */\n            .control-content {\n                padding: 0 24px 24px 24px;\n                flex: 1;\n            }\n            \n            .control-section {\n                margin-bottom: 32px;\n                padding: 0;\n                background: none;\n                border-radius: 0;\n                backdrop-filter: none;\n            }\n            \n            .section-header {\n                margin: 0 0 16px 0;\n                color: #1d1d1f;\n                font-size: 20px;\n                font-weight: 600;\n                text-transform: none;\n                letter-spacing: -0.3px;\n            }\n            \n            /* Scrollbar styling */\n            #controlPanel::-webkit-scrollbar {\n                width: 6px;\n            }\n            \n            #controlPanel::-webkit-scrollbar-track {\n                background: transparent;\n            }\n            \n            #controlPanel::-webkit-scrollbar-thumb {\n                background: rgba(0, 0, 0, 0.2);\n                border-radius: 3px;\n            }\n            \n            #controlPanel::-webkit-scrollbar-thumb:hover {\n                background: rgba(0, 0, 0, 0.3);\n            }\n            \n            /* Responsive Design */\n            @media (max-width: 768px) {\n                body {\n                    flex-direction: column;\n                }\n                \n                #controlPanel {\n                    width: 100%;\n                    height: auto;\n                    max-height: 50vh;\n                    border-left: none;\n                    border-top: 1px solid rgba(255, 255, 255, 0.2);\n                    order: 2;\n                }\n                \n                #artCanvas {\n                    margin: 8px;\n                    border-radius: 8px;\n                    order: 1;\n                }\n                \n                .control-header {\n                    padding: 16px 20px 12px 20px;\n                }\n                \n                .control-title {\n                    font-size: 24px;\n                }\n                \n                .control-content {\n                    padding: 0 20px 20px 20px;\n                }\n                \n                .control-section {\n                    margin-bottom: 24px;\n                }\n                \n                .section-header {\n                    font-size: 18px;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Bind event listeners (simplified for side-by-side layout)\n     */\n    bindEvents() {\n        // Panel is always visible in side-by-side layout\n        // No toggle functionality needed\n        this.isOpen = true;\n    }\n    \n    /**\n     * Toggle panel open/closed (not needed for side-by-side layout)\n     */\n    toggle() {\n        // Panel is always visible\n    }\n    \n    /**\n     * Open panel (not needed for side-by-side layout)\n     */\n    open() {\n        // Panel is always visible\n    }\n    \n    /**\n     * Close panel (not needed for side-by-side layout)\n     */\n    close() {\n        // Panel is always visible\n    }\n    \n    /**\n     * Update controls based on app state\n     */\n    updateControls() {\n        if (this.patternControls) {\n            this.patternControls.update();\n        }\n        if (this.themeControls) {\n            this.themeControls.update();\n        }\n    }\n    \n    /**\n     * Get current panel state\n     */\n    getState() {\n        return {\n            isOpen: this.isOpen,\n            patternControls: this.patternControls?.getState(),\n            themeControls: this.themeControls?.getState()\n        };\n    }\n    \n    /**\n     * Cleanup\n     */\n    destroy() {\n        // Remove event listeners\n        this.toggleButton?.removeEventListener('click', this.toggle);\n        this.backdrop?.removeEventListener('click', this.close);\n        \n        // Remove elements\n        this.toggleButton?.remove();\n        this.backdrop?.remove();\n        this.panel?.remove();\n        \n        // Cleanup sub-components\n        this.patternControls?.destroy();\n        this.themeControls?.destroy();\n        \n        console.log('ControlPanel destroyed');\n    }\n}\n\nexport default ControlPanel;","/**\n * GentlePattern.js - Gentle Flowing Lines Pattern\n * \n * JavaScript version of the gentle pattern with flowing sinusoidal lines\n * Converted from React TypeScript GentlePattern.ts\n */\n\nexport class GentlePattern {\n    constructor() {\n        this.name = 'Gentle';\n        this.type = 'gentle';\n    }\n    \n    /**\n     * Render gentle flowing lines pattern\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {number} time - Animation time\n     * @param {number} width - Canvas width\n     * @param {number} height - Canvas height\n     * @param {Object} colors - Color theme\n     * @param {Object} options - Pattern options\n     */\n    render(ctx, time, width, height, colors, options = {}) {\n        const { wavelength = 25, lineDensity = 35 } = options;\n        \n        // Clear canvas with background color\n        ctx.fillStyle = `rgb(${colors.background[0]}, ${colors.background[1]}, ${colors.background[2]})`;\n        ctx.fillRect(0, 0, width, height);\n        \n        const stepSize = Math.max(4, Math.ceil(width / 300));\n        \n        // Draw horizontal flowing lines\n        const numHorizontalLines = Math.min(lineDensity, Math.ceil(height / 20));\n        for (let i = 0; i < numHorizontalLines; i++) {\n            const yPos = (i / numHorizontalLines) * height;\n            const amplitude = (35 + 20 * Math.sin(time * 0.2 + i * 0.1)) * (wavelength / 25);\n            const frequency = (0.008 + 0.004 * Math.sin(time * 0.1 + i * 0.05)) * (25 / wavelength);\n            const speedOffset = time * (0.5 + 0.3 * Math.sin(i * 0.1));\n            const thickness = 1.5 + 1.0 * Math.sin(time + i * 0.2);\n            const opacity = 0.4 + 0.3 * Math.abs(Math.sin(time * 0.3 + i * 0.15));\n            \n            ctx.beginPath();\n            ctx.lineWidth = thickness;\n            ctx.strokeStyle = `rgba(${colors.primary[0]}, ${colors.primary[1]}, ${colors.primary[2]}, ${opacity})`;\n            \n            let firstPoint = true;\n            for (let x = 0; x < width; x += stepSize) {\n                const y = yPos + amplitude * Math.sin(x * frequency + speedOffset);\n                if (firstPoint) {\n                    ctx.moveTo(x, y);\n                    firstPoint = false;\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            ctx.stroke();\n        }\n        \n        // Draw vertical flowing lines\n        const numVerticalLines = Math.min(lineDensity, Math.ceil(width / 25));\n        for (let i = 0; i < numVerticalLines; i++) {\n            const xPos = (i / numVerticalLines) * width;\n            const amplitude = (30 + 15 * Math.sin(time * 0.15 + i * 0.12)) * (wavelength / 25);\n            const frequency = (0.009 + 0.004 * Math.cos(time * 0.12 + i * 0.07)) * (25 / wavelength);\n            const speedOffset = time * (0.4 + 0.25 * Math.cos(i * 0.15));\n            const thickness = 1.2 + 0.8 * Math.sin(time + i * 0.3);\n            const opacity = 0.3 + 0.2 * Math.abs(Math.sin(time * 0.25 + i * 0.18));\n            \n            ctx.beginPath();\n            ctx.lineWidth = thickness;\n            ctx.strokeStyle = `rgba(${colors.secondary[0]}, ${colors.secondary[1]}, ${colors.secondary[2]}, ${opacity})`;\n            \n            let firstPoint = true;\n            for (let y = 0; y < height; y += stepSize) {\n                const x = xPos + amplitude * Math.sin(y * frequency + speedOffset);\n                if (firstPoint) {\n                    ctx.moveTo(x, y);\n                    firstPoint = false;\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            ctx.stroke();\n        }\n        \n        // Draw diagonal flowing lines\n        const numDiagonalLines = Math.min(Math.ceil(lineDensity / 2), Math.ceil(width / 80));\n        for (let i = 0; i < numDiagonalLines; i++) {\n            const offset = (i / numDiagonalLines) * width * 1.5 - width * 0.25;\n            const amplitude = (20 + 10 * Math.cos(time * 0.25 + i * 0.1)) * (wavelength / 25);\n            const frequency = (0.01 + 0.005 * Math.sin(time * 0.15 + i * 0.08)) * (25 / wavelength);\n            const phase = time * (0.3 + 0.2 * Math.sin(i * 0.1));\n            const thickness = 1.0 + 0.5 * Math.sin(time + i * 0.25);\n            const opacity = 0.2 + 0.15 * Math.abs(Math.sin(time * 0.2 + i * 0.1));\n            \n            ctx.beginPath();\n            ctx.lineWidth = thickness;\n            ctx.strokeStyle = `rgba(${colors.accent[0]}, ${colors.accent[1]}, ${colors.accent[2]}, ${opacity})`;\n            \n            const steps = Math.ceil(height / stepSize);\n            let firstPoint = true;\n            for (let j = 0; j <= steps; j++) {\n                const progress = j / steps;\n                const x = offset + progress * width;\n                const y = progress * height + amplitude * Math.sin(progress * 8 + phase);\n                \n                if (x >= 0 && x <= width && y >= 0 && y <= height) {\n                    if (firstPoint) {\n                        ctx.moveTo(x, y);\n                        firstPoint = false;\n                    } else {\n                        ctx.lineTo(x, y);\n                    }\n                }\n            }\n            ctx.stroke();\n        }\n    }\n\n    /**\n     * Calculate pattern complexity based on parameters\n     * @param {Object} params - Pattern parameters\n     * @returns {number} - Complexity score (1-100)\n     */\n    calculateComplexity(params = {}) {\n        const { wavelength = 25, lineDensity = 35 } = params;\n        \n        // Base complexity starts at 20\n        let complexity = 20;\n        \n        // Line density contributes most to complexity (40 points max)\n        const densityFactor = Math.min(lineDensity / 100, 1); // Normalize to 0-1\n        complexity += densityFactor * 40;\n        \n        // Wavelength affects complexity inversely (smaller wavelength = more complex)\n        const wavelengthFactor = Math.max(0, 1 - (wavelength / 100)); // Normalize inversely\n        complexity += wavelengthFactor * 30;\n        \n        // Additional complexity from multiple line types (horizontal, vertical, diagonal)\n        complexity += 10; // Fixed bonus for multi-directional lines\n        \n        return Math.min(Math.max(Math.round(complexity), 1), 100);\n    }\n}\n\nexport default GentlePattern;","/**\n * MandalaPattern.js - Geometric Mandala Pattern\n * \n * JavaScript version of the mandala pattern with breathing animations\n * Converted from React TypeScript MandalaPattern.ts\n */\n\nexport class MandalaPattern {\n    constructor() {\n        this.name = 'Mandala';\n        this.type = 'mandala';\n    }\n    \n    /**\n     * Render geometric mandala pattern\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {number} time - Animation time\n     * @param {number} width - Canvas width\n     * @param {number} height - Canvas height\n     * @param {Object} colors - Color theme\n     * @param {Object} options - Pattern options\n     */\n    render(ctx, time, width, height, colors, options = {}) {\n        const { mandalaComplexity = 6, mandalaSpeed = 1.0 } = options;\n        \n        // Clear canvas with background color\n        ctx.fillStyle = `rgb(${colors.background[0]}, ${colors.background[1]}, ${colors.background[2]})`;\n        ctx.fillRect(0, 0, width, height);\n        \n        const animatedTime = time * mandalaSpeed;\n        const centerX = width / 2;\n        const centerY = height / 2;\n        const baseRadius = Math.min(width, height) / 8;\n        \n        // Draw center point\n        const centerIntensity = (Math.sin(animatedTime * 0.025) + 1) / 2;\n        const centerSize = 3 + centerIntensity * 3;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, centerSize, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(${colors.primary[0]}, ${colors.primary[1]}, ${colors.primary[2]}, ${0.8 + centerIntensity * 0.2})`;\n        ctx.fill();\n        \n        // Draw concentric layers\n        for (let layer = 0; layer < mandalaComplexity; layer++) {\n            const radius = baseRadius * (1 + layer * 0.7);\n            const points = 6 + layer * 2;\n            \n            for (let i = 0; i < points; i++) {\n                const angle = (i / points) * Math.PI * 2;\n                const breathingFactor = 0.3 * Math.sin(animatedTime * 0.025 + layer * 0.5 + i * 0.2);\n                const x = centerX + Math.cos(angle) * (radius + breathingFactor * radius);\n                const y = centerY + Math.sin(angle) * (radius + breathingFactor * radius);\n                \n                const intensityPhase = (Math.sin(animatedTime * 0.015 + layer * 0.4 + i * 0.8) + 1) / 2;\n                const opacity = 0.3 + intensityPhase * 0.6;\n                const size = 2 + intensityPhase * (4 + layer);\n                \n                ctx.beginPath();\n                if (layer % 3 === 0) {\n                    // Circles\n                    ctx.arc(x, y, size, 0, Math.PI * 2);\n                    ctx.fillStyle = `rgba(${colors.primary[0]}, ${colors.primary[1]}, ${colors.primary[2]}, ${opacity})`;\n                    ctx.fill();\n                } else if (layer % 3 === 1) {\n                    // Squares\n                    ctx.rect(x - size, y - size, size * 2, size * 2);\n                    ctx.fillStyle = `rgba(${colors.secondary[0]}, ${colors.secondary[1]}, ${colors.secondary[2]}, ${opacity})`;\n                    ctx.fill();\n                } else {\n                    // Diamonds\n                    ctx.moveTo(x, y - size);\n                    ctx.lineTo(x + size, y);\n                    ctx.lineTo(x, y + size);\n                    ctx.lineTo(x - size, y);\n                    ctx.closePath();\n                    ctx.fillStyle = `rgba(${colors.accent[0]}, ${colors.accent[1]}, ${colors.accent[2]}, ${opacity})`;\n                    ctx.fill();\n                }\n                \n                // Draw secondary elements\n                if (layer > 0 && i % 2 === 0) {\n                    const secondaryRadius = radius * 0.6;\n                    const x2 = centerX + Math.cos(angle + 0.3) * secondaryRadius;\n                    const y2 = centerY + Math.sin(angle + 0.3) * secondaryRadius;\n                    \n                    const secondaryIntensity = (Math.sin(animatedTime * 0.02 + layer * 0.3 + i) + 1) / 2;\n                    const secondaryOpacity = 0.2 + secondaryIntensity * 0.4;\n                    const secondarySize = 1 + secondaryIntensity * 2;\n                    \n                    ctx.beginPath();\n                    ctx.arc(x2, y2, secondarySize, 0, Math.PI * 2);\n                    ctx.fillStyle = `rgba(${colors.secondary[0]}, ${colors.secondary[1]}, ${colors.secondary[2]}, ${secondaryOpacity})`;\n                    ctx.fill();\n                }\n            }\n        }\n        \n        // Draw connecting lines\n        const numConnections = Math.floor(mandalaComplexity * 8);\n        for (let i = 0; i < numConnections; i++) {\n            const angle = (i / numConnections) * Math.PI * 2;\n            const radius1 = baseRadius * 0.5;\n            const radius2 = baseRadius * (2 + mandalaComplexity * 0.5);\n            \n            const x1 = centerX + Math.cos(angle) * radius1;\n            const y1 = centerY + Math.sin(angle) * radius1;\n            const x2 = centerX + Math.cos(angle) * radius2;\n            const y2 = centerY + Math.sin(angle) * radius2;\n            \n            const lineIntensity = (Math.sin(animatedTime * 0.01 + i * 0.2) + 1) / 2;\n            const lineOpacity = 0.1 + lineIntensity * 0.2;\n            \n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.strokeStyle = `rgba(${colors.primary[0]}, ${colors.primary[1]}, ${colors.primary[2]}, ${lineOpacity})`;\n            ctx.lineWidth = 1 + lineIntensity;\n            ctx.stroke();\n        }\n        \n        // Draw concentric rings with dots\n        for (let ring = 1; ring <= 3; ring++) {\n            const ringRadius = baseRadius * (0.3 + ring * 0.4);\n            const ringPoints = ring * 8;\n            \n            for (let i = 0; i < ringPoints; i++) {\n                const angle = (i / ringPoints) * Math.PI * 2;\n                const breathingOffset = Math.sin(animatedTime * 0.03 + ring * 0.8 + i * 0.1) * (ringRadius * 0.1);\n                const x = centerX + Math.cos(angle) * (ringRadius + breathingOffset);\n                const y = centerY + Math.sin(angle) * (ringRadius + breathingOffset);\n                \n                const dotIntensity = (Math.sin(animatedTime * 0.025 + ring * 0.5 + i * 0.3) + 1) / 2;\n                const dotOpacity = 0.2 + dotIntensity * 0.5;\n                const dotSize = 1 + dotIntensity * 2;\n                \n                ctx.beginPath();\n                ctx.arc(x, y, dotSize, 0, Math.PI * 2);\n                ctx.fillStyle = `rgba(${colors.accent[0]}, ${colors.accent[1]}, ${colors.accent[2]}, ${dotOpacity})`;\n                ctx.fill();\n            }\n        }\n    }\n\n    /**\n     * Calculate pattern complexity based on parameters\n     * @param {Object} params - Pattern parameters\n     * @returns {number} - Complexity score (1-100)\n     */\n    calculateComplexity(params = {}) {\n        const { mandalaComplexity = 6, mandalaSpeed = 1.0 } = params;\n        \n        // Base complexity starts at 25\n        let complexity = 25;\n        \n        // Mandala complexity contributes most (50 points max)\n        const complexityFactor = Math.min(mandalaComplexity / 20, 1); // Normalize to 0-1\n        complexity += complexityFactor * 50;\n        \n        // Speed affects computational complexity (15 points max)\n        const speedFactor = Math.min(mandalaSpeed / 3, 1); // Normalize to 0-1\n        complexity += speedFactor * 15;\n        \n        // Additional complexity from geometric shapes and breathing animations\n        complexity += 10; // Fixed bonus for geometric complexity\n        \n        return Math.min(Math.max(Math.round(complexity), 1), 100);\n    }\n}\n\nexport default MandalaPattern;","/**\n * VectorFieldPattern.js - Vector Field Flow Pattern\n * \n * JavaScript version of the vector field pattern with particle flow\n * Converted from React TypeScript VectorFieldPattern.ts\n */\n\nimport { VECTOR_FIELD_CONFIG } from '../constants/patternConfig.js';\n\nexport class Line {\n    constructor(width, height, colors, tileSize) {\n        this.x = 0;\n        this.y = 0;\n        this.points = [];\n        this.age = 0;\n        this.lifespan = 0;\n        this.opacity = 0;\n        this.width = 0;\n        this.baseColor = { r: 0, g: 0, b: 0 };\n        \n        this.reset(width, height, colors, tileSize);\n    }\n    \n    reset(width, height, colors, tileSize) {\n        const angle = Math.random() * Math.PI * 2;\n        const distance = 50 + Math.random() * 150;\n        this.x = width / 2 + Math.cos(angle) * distance;\n        this.y = height / 2 + Math.sin(angle) * distance;\n        this.points = [];\n        this.age = 0;\n        this.lifespan = 400 + Math.random() * 600;\n        this.opacity = 0;\n        this.width = 0.2 + Math.random() * 0.8;\n        \n        const tileX = Math.floor(this.x / tileSize);\n        const tileY = Math.floor(this.y / tileSize);\n        const colorT = (tileX + tileY) / 20;\n        \n        this.baseColor = {\n            r: Math.round(colors.primary[0] + (colors.secondary[0] - colors.primary[0]) * colorT),\n            g: Math.round(colors.primary[1] + (colors.secondary[1] - colors.primary[1]) * colorT),\n            b: Math.round(colors.primary[2] + (colors.secondary[2] - colors.primary[2]) * colorT)\n        };\n    }\n    \n    update(time, vectorField, width, height, colors, tileSize) {\n        this.age += 1;\n        if (this.age >= this.lifespan) {\n            this.reset(width, height, colors, tileSize);\n            return;\n        }\n        \n        const progress = this.age / this.lifespan;\n        if (progress < 0.1) {\n            this.opacity = progress / 0.1 * VECTOR_FIELD_CONFIG.lineAlpha;\n        } else if (progress > 0.9) {\n            this.opacity = (1 - (progress - 0.9) / 0.1) * VECTOR_FIELD_CONFIG.lineAlpha;\n        } else {\n            this.opacity = VECTOR_FIELD_CONFIG.lineAlpha;\n        }\n        \n        const vector = vectorField(this.x, this.y, time);\n        this.points.push({ x: this.x, y: this.y });\n        \n        if (this.points.length > VECTOR_FIELD_CONFIG.linePoints) {\n            this.points.shift();\n        }\n        \n        this.x += vector.x * 0.5;\n        this.y += vector.y * 0.5;\n        \n        const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        if (this.x < 0 || this.x > width || this.y < 0 || this.y > height || magnitude < 0.01) {\n            this.reset(width, height, colors, tileSize);\n        }\n    }\n    \n    draw(ctx) {\n        if (this.points.length < 2) return;\n        \n        ctx.beginPath();\n        ctx.strokeStyle = `rgba(${this.baseColor.r}, ${this.baseColor.g}, ${this.baseColor.b}, ${this.opacity})`;\n        ctx.lineWidth = this.width * VECTOR_FIELD_CONFIG.lineWidth;\n        ctx.moveTo(this.points[0].x, this.points[0].y);\n        \n        for (let i = 1; i < this.points.length; i++) {\n            ctx.lineTo(this.points[i].x, this.points[i].y);\n        }\n        \n        ctx.stroke();\n    }\n}\n\nexport class VectorFieldPattern {\n    constructor() {\n        this.name = 'Vector Field';\n        this.type = 'vectorfield';\n        this.lines = [];\n        this.initialized = false;\n    }\n    \n    /**\n     * Simple noise function\n     */\n    noise(x, y, z) {\n        return Math.sin(x * 7 + z * 3) * 0.5 + Math.sin(y * 8 + z * 4) * 0.5;\n    }\n    \n    /**\n     * Get tile offset for shifting effect\n     */\n    getTileOffset(x, y, t, tileSize, tileShiftAmplitude) {\n        const tileX = Math.floor(x / tileSize);\n        const tileY = Math.floor(y / tileSize);\n        const offsetX = tileShiftAmplitude * Math.sin(t * 0.01 + tileX * 0.5 + tileY * 0.3);\n        const offsetY = tileShiftAmplitude * Math.cos(t * 0.01 + tileY * 0.5 + tileX * 0.3);\n        return { offsetX, offsetY };\n    }\n    \n    /**\n     * Initialize lines if not already initialized\n     */\n    initializeLines(width, height, colors, tileSize) {\n        if (!this.initialized) {\n            this.lines = [];\n            for (let i = 0; i < VECTOR_FIELD_CONFIG.numLines; i++) {\n                this.lines.push(new Line(width, height, colors, tileSize));\n            }\n            this.initialized = true;\n        }\n    }\n    \n    /**\n     * Render vector field pattern\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {number} time - Animation time\n     * @param {number} width - Canvas width\n     * @param {number} height - Canvas height\n     * @param {Object} colors - Color theme\n     * @param {Object} options - Pattern options\n     */\n    render(ctx, time, width, height, colors, options = {}) {\n        const { tileSize = 55, tileShiftAmplitude = 10 } = options;\n        const noiseTimeScale = 0.000125;\n        \n        // Clear canvas with background color\n        ctx.fillStyle = `rgb(${colors.background[0]}, ${colors.background[1]}, ${colors.background[2]})`;\n        ctx.fillRect(0, 0, width, height);\n        \n        // Initialize lines if needed\n        this.initializeLines(width, height, colors, tileSize);\n        \n        // Define vector field function\n        const vectorField = (x, y, t) => {\n            const { offsetX, offsetY } = this.getTileOffset(x, y, t, tileSize, tileShiftAmplitude);\n            const adjustedX = x + offsetX;\n            const adjustedY = y + offsetY;\n            const nx = (adjustedX - width / 2) * 0.01;\n            const ny = (adjustedY - height / 2) * 0.01;\n            const n = this.noise(nx, ny, t * noiseTimeScale);\n            const cx = adjustedX - width / 2;\n            const cy = adjustedY - height / 2;\n            const r = Math.sqrt(cx * cx + cy * cy);\n            const mask = Math.max(0, 1 - r / 200);\n            const angle = n * Math.PI * 4 + Math.atan2(cy, cx);\n            return { x: Math.cos(angle) * mask, y: Math.sin(angle) * mask };\n        };\n        \n        // Update and draw lines\n        this.lines.forEach(line => {\n            line.update(time, vectorField, width, height, colors, tileSize);\n            line.draw(ctx);\n        });\n    }\n\n    /**\n     * Calculate pattern complexity based on parameters\n     * @param {Object} params - Pattern parameters\n     * @returns {number} - Complexity score (1-100)\n     */\n    calculateComplexity(params = {}) {\n        const { tileSize = 55, tileShiftAmplitude = 10 } = params;\n        \n        // Base complexity starts at 40 (high due to particle system)\n        let complexity = 40;\n        \n        // Tile size affects complexity inversely (smaller tiles = more computation)\n        const tileFactor = Math.max(0, 1 - (tileSize / 100)); // Normalize inversely\n        complexity += tileFactor * 35;\n        \n        // Tile shift amplitude adds dynamic complexity\n        const shiftFactor = Math.min(tileShiftAmplitude / 20, 1); // Normalize to 0-1\n        complexity += shiftFactor * 15;\n        \n        // Additional complexity from 400 animated lines with vector field calculations\n        complexity += 10; // Fixed bonus for particle system complexity\n        \n        return Math.min(Math.max(Math.round(complexity), 1), 100);\n    }\n}\n\nexport default VectorFieldPattern;","/**\n * ShellRidgePattern.js - Shell Ridge Texture Pattern\n * \n * JavaScript version of the shell ridge pattern with concentric rings\n * Converted from React TypeScript ShellRidgePattern.ts\n */\n\nexport class ShellRidgePattern {\n    constructor() {\n        this.name = 'Shell Ridge';\n        this.type = 'shellridge';\n    }\n    \n    /**\n     * Render shell ridge pattern\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {number} time - Animation time\n     * @param {number} width - Canvas width\n     * @param {number} height - Canvas height\n     * @param {Object} colors - Color theme\n     * @param {Object} options - Pattern options\n     */\n    render(ctx, time, width, height, colors, options = {}) {\n        const { shellRidgeRings = 25, shellRidgeDistortion = 8 } = options;\n        \n        // Clear canvas with background color\n        ctx.fillStyle = `rgb(${colors.background[0]}, ${colors.background[1]}, ${colors.background[2]})`;\n        ctx.fillRect(0, 0, width, height);\n        \n        // The still point at the center of all motion\n        const centerX = width / 2;\n        const centerY = height / 2;\n        const animatedTime = time * 100; // Scale time for smoother animation\n        \n        // Without going outside, see the pattern of creation\n        for (let r = 0; r < shellRidgeRings; r++) {\n            const baseRadius = 10 + r * Math.min(width, height) / (shellRidgeRings * 2);  // Each circle a world within worlds\n            \n            ctx.beginPath();\n            for (let a = 0; a <= Math.PI * 2; a += 0.05) {\n                // The dance of form and emptiness\n                const distortion = Math.sin(a * 8 + animatedTime * 0.75 + r * 0.5) * shellRidgeDistortion +  // Breath of life\n                                Math.sin(a * 12 - animatedTime * 1 + r * 0.3) * (shellRidgeDistortion * 0.625);       // Pulse of being\n                \n                const radius = baseRadius + distortion;\n                const x = centerX + Math.cos(a) * radius;\n                const y = centerY + Math.sin(a) * radius;\n                \n                if (a === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            ctx.closePath();\n            \n            // Seeing the subtle within the obvious\n            ctx.lineWidth = 1.5 + Math.sin(r * 0.5 + animatedTime * 0.01) * 0.5;  // The way things change\n            const opacity = 0.6 - r * 0.02;\n            ctx.strokeStyle = `rgba(${colors.primary[0]}, ${colors.primary[1]}, ${colors.primary[2]}, ${Math.max(0.1, opacity)})`;  // From form to formless\n            ctx.stroke();\n            \n            // The infinite in the finite\n            for (let t = 0; t < 60; t++) {  // Each point contains the whole\n                const angle = (t / 60) * Math.PI * 2;\n                const textureRadius = baseRadius + Math.sin(angle * 8 + animatedTime * 1.5 * 0.01) * 5;\n                const tx = centerX + Math.cos(angle) * textureRadius;\n                const ty = centerY + Math.sin(angle) * textureRadius;\n                \n                ctx.beginPath();\n                ctx.arc(tx, ty, 0.5, 0, Math.PI * 2);\n                const textureOpacity = 0.2 - r * 0.01;\n                ctx.fillStyle = `rgba(${colors.accent[0]}, ${colors.accent[1]}, ${colors.accent[2]}, ${Math.max(0.05, textureOpacity)})`;\n                ctx.fill();\n            }\n        }\n    }\n\n    /**\n     * Calculate pattern complexity based on parameters\n     * @param {Object} params - Pattern parameters\n     * @returns {number} - Complexity score (1-100)\n     */\n    calculateComplexity(params = {}) {\n        const { shellRidgeRings = 25, shellRidgeDistortion = 8 } = params;\n        \n        // Base complexity starts at 30\n        let complexity = 30;\n        \n        // Number of rings contributes most to complexity (45 points max)\n        const ringsFactor = Math.min(shellRidgeRings / 50, 1); // Normalize to 0-1\n        complexity += ringsFactor * 45;\n        \n        // Distortion adds computational complexity (20 points max)\n        const distortionFactor = Math.min(shellRidgeDistortion / 15, 1); // Normalize to 0-1\n        complexity += distortionFactor * 20;\n        \n        // Additional complexity from textured surfaces and breathing effects\n        complexity += 5; // Fixed bonus for textural complexity\n        \n        return Math.min(Math.max(Math.round(complexity), 1), 100);\n    }\n}\n\nexport default ShellRidgePattern;","/**\n * Q5App-minimal.js - Minimal Canvas 2D Application \n * \n * Simple working implementation with SVG masking and interference pattern\n * No external dependencies - pure Canvas 2D\n */\n\nimport { SVG_CONFIG, DEFAULT_VALUES, PATTERN_TYPES } from '../constants/patternConfig.js';\nimport { ControlPanel } from '../ui/ControlPanel.js';\nimport { GentlePattern } from '../patterns/GentlePattern.js';\nimport { MandalaPattern } from '../patterns/MandalaPattern.js';\nimport { VectorFieldPattern } from '../patterns/VectorFieldPattern.js';\nimport { ShellRidgePattern } from '../patterns/ShellRidgePattern.js';\n\nexport class Q5App {\n    constructor(config = {}) {\n        this.config = {\n            canvas: {\n                targetFPS: 60,\n                ...config.canvas\n            },\n            debug: true,\n            ...config\n        };\n        \n        this.initialized = false;\n        this.canvas = null;\n        this.ctx = null;\n        this.frameCount = 0;\n        this.startTime = Date.now();\n        this.logoPath2D = null;\n        this.backgroundPath2D = null;\n        this.controlPanel = null;\n        \n        // Pattern parameters (using defaults from config)\n        this.patternType = PATTERN_TYPES.INTERFERENCE;\n        this.wavelength = DEFAULT_VALUES.wavelength;\n        this.speed = DEFAULT_VALUES.speed;\n        this.threshold = DEFAULT_VALUES.threshold;\n        this.gradientMode = DEFAULT_VALUES.gradientMode;\n        this.sourceCount = DEFAULT_VALUES.sourceCount;\n        this.lineDensity = DEFAULT_VALUES.lineDensity;\n        this.mandalaComplexity = DEFAULT_VALUES.mandalaComplexity;\n        this.mandalaSpeed = DEFAULT_VALUES.mandalaSpeed;\n        this.tileSize = DEFAULT_VALUES.tileSize;\n        this.tileShiftAmplitude = DEFAULT_VALUES.tileShiftAmplitude;\n        this.shellRidgeRings = DEFAULT_VALUES.shellRidgeRings;\n        this.shellRidgeDistortion = DEFAULT_VALUES.shellRidgeDistortion;\n        \n        // Theme colors (using defaults from config)\n        this.colors = {\n            primary: this.hexToRgb(DEFAULT_VALUES.colors.color1),\n            secondary: this.hexToRgb(DEFAULT_VALUES.colors.color2),\n            accent: this.hexToRgb(DEFAULT_VALUES.colors.color3),\n            background: this.hexToRgb(DEFAULT_VALUES.colors.color4)\n        };\n        \n        // Initialize pattern renderers\n        this.patterns = {\n            [PATTERN_TYPES.GENTLE]: new GentlePattern(),\n            [PATTERN_TYPES.MANDALA]: new MandalaPattern(),\n            [PATTERN_TYPES.VECTOR_FIELD]: new VectorFieldPattern(),\n            [PATTERN_TYPES.SHELL_RIDGE]: new ShellRidgePattern()\n        };\n        \n        console.log('Q5App initialized with config:', this.config);\n    }\n    \n    async initialize() {\n        console.log('Initializing Q5App...');\n        \n        try {\n            // Find and set up canvas\n            this.canvas = document.getElementById('artCanvas');\n            if (!this.canvas) {\n                throw new Error('Canvas element with id \"artCanvas\" not found');\n            }\n            \n            console.log('Canvas found:', this.canvas);\n            \n            // Set up canvas size\n            this.resizeCanvas();\n            \n            console.log('Canvas resized to:', this.canvas.width, 'x', this.canvas.height);\n            \n            // Get 2D context\n            this.ctx = this.canvas.getContext('2d');\n            if (!this.ctx) {\n                throw new Error('Failed to get 2D context');\n            }\n            \n            // Create SVG logo path\n            this.createLogoPath();\n            \n            this.initialized = true;\n            console.log('Q5App initialized successfully');\n            \n            // Make canvas visible\n            this.canvas.style.display = 'block';\n            \n            // Initialize control panel\n            this.initializeControls();\n            \n            // Start animation loop\n            this.startAnimation();\n            \n        } catch (error) {\n            console.error('Q5App initialization failed:', error);\n            throw error;\n        }\n    }\n    \n    createLogoPath() {\n        try {\n            // Create Path2D objects for both paths\n            this.logoPath2D = new Path2D(SVG_CONFIG.path);           // White letterforms for clipping\n            this.backgroundPath2D = new Path2D(SVG_CONFIG.backgroundPath); // Black outline\n            console.log('Logo Path2D objects created successfully');\n        } catch (error) {\n            console.warn('Failed to create Path2D, creating fallback rectangle:', error);\n            // Fallback to simple rectangle\n            this.logoPath2D = new Path2D();\n            this.backgroundPath2D = new Path2D();\n            const halfWidth = SVG_CONFIG.width / 2;\n            const halfHeight = SVG_CONFIG.height / 2;\n            \n            this.logoPath2D.rect(-halfWidth, -halfHeight, SVG_CONFIG.width, SVG_CONFIG.height);\n            this.backgroundPath2D.rect(-halfWidth - 10, -halfHeight - 10, SVG_CONFIG.width + 20, SVG_CONFIG.height + 20);\n        }\n    }\n    \n    /**\n     * Initialize control panel\n     */\n    initializeControls() {\n        console.log('Initializing control panel...');\n        this.controlPanel = new ControlPanel(this);\n        console.log('Control panel initialized');\n    }\n    \n    /**\n     * Update parameter from controls\n     * @param {string} key - Parameter key\n     * @param {any} value - Parameter value\n     */\n    updateParameter(key, value) {\n        console.log(`Updating parameter: ${key} = ${value}`);\n        \n        // Handle color updates\n        if (key === 'colors') {\n            this.colors = {\n                primary: this.hexToRgb(value.color1),\n                secondary: this.hexToRgb(value.color2),\n                accent: this.hexToRgb(value.color3),\n                background: this.hexToRgb(value.color4)\n            };\n            return;\n        }\n        \n        // Handle individual parameter updates\n        if (this.hasOwnProperty(key)) {\n            this[key] = value;\n        } else {\n            console.warn(`Unknown parameter: ${key}`);\n        }\n    }\n    \n    /**\n     * Get parameter value\n     * @param {string} key - Parameter key\n     * @returns {any} - Parameter value\n     */\n    getParameter(key) {\n        if (key === 'colors') {\n            return {\n                color1: this.rgbToHex(this.colors.primary),\n                color2: this.rgbToHex(this.colors.secondary),\n                color3: this.rgbToHex(this.colors.accent),\n                color4: this.rgbToHex(this.colors.background)\n            };\n        }\n        \n        return this.hasOwnProperty(key) ? this[key] : undefined;\n    }\n    \n    /**\n     * Convert hex color to RGB array\n     * @param {string} hex - Hex color string\n     * @returns {Array} - RGB array [r, g, b]\n     */\n    hexToRgb(hex) {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? [\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16)\n        ] : [0, 0, 0];\n    }\n    \n    /**\n     * Convert RGB array to hex color\n     * @param {Array} rgb - RGB array [r, g, b]\n     * @returns {string} - Hex color string\n     */\n    rgbToHex(rgb) {\n        return \"#\" + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);\n    }\n    \n    resizeCanvas() {\n        // Get viewport dimensions\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n        \n        // Set canvas size to fill most of the viewport\n        const canvasWidth = Math.min(viewportWidth * 0.9, 1200);\n        const canvasHeight = Math.min(viewportHeight * 0.8, 800);\n        \n        this.canvas.width = canvasWidth;\n        this.canvas.height = canvasHeight;\n        \n        console.log(`Canvas resized to ${canvasWidth}x${canvasHeight}`);\n    }\n    \n    startAnimation() {\n        const animate = () => {\n            if (this.initialized) {\n                this.draw();\n                requestAnimationFrame(animate);\n            }\n        };\n        requestAnimationFrame(animate);\n    }\n    \n    draw() {\n        if (!this.initialized || !this.ctx) return;\n        \n        this.frameCount++;\n        const currentTime = Date.now();\n        const elapsed = (currentTime - this.startTime) / 1000;\n        \n        // Debug: Log first few frames\n        if (this.frameCount <= 5) {\n            console.log(`Frame ${this.frameCount}: Canvas ${this.canvas.width}x${this.canvas.height}`);\n        }\n        \n        // Clear canvas with white background\n        this.ctx.fillStyle = '#ffffff';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // Create off-screen canvas for pattern\n        const patternCanvas = document.createElement('canvas');\n        patternCanvas.width = this.canvas.width;\n        patternCanvas.height = this.canvas.height;\n        const patternCtx = patternCanvas.getContext('2d');\n        \n        // Render selected pattern to off-screen canvas\n        this.renderPattern(patternCtx, elapsed, this.canvas.width, this.canvas.height);\n        \n        // Apply SVG mask to the pattern (using white letterforms only)\n        this.applySVGMask(patternCanvas);\n        \n        // Draw the black outline background first\n        this.drawLogoBackground();\n        \n        // Draw the masked pattern to main canvas (fills the white letterforms)\n        this.ctx.drawImage(patternCanvas, 0, 0);\n        \n        // Draw frame info\n        this.drawFrameInfo(elapsed);\n    }\n    \n    /**\n     * Render the selected pattern\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {number} time - Animation time\n     * @param {number} width - Canvas width\n     * @param {number} height - Canvas height\n     */\n    renderPattern(ctx, time, width, height) {\n        // Get pattern options based on current pattern type\n        const options = this.getPatternOptions();\n        \n        // Render based on pattern type\n        if (this.patternType === PATTERN_TYPES.INTERFERENCE) {\n            this.renderInterferencePattern(ctx, time);\n        } else if (this.patterns[this.patternType]) {\n            this.patterns[this.patternType].render(ctx, time, width, height, this.colors, options);\n        } else {\n            // Fallback to interference pattern\n            this.renderInterferencePattern(ctx, time);\n        }\n    }\n    \n    /**\n     * Get pattern options based on current settings\n     * @returns {Object} Pattern options\n     */\n    getPatternOptions() {\n        return {\n            wavelength: this.wavelength,\n            speed: this.speed,\n            threshold: this.threshold,\n            gradientMode: this.gradientMode,\n            sourceCount: this.sourceCount,\n            lineDensity: this.lineDensity,\n            mandalaComplexity: this.mandalaComplexity,\n            mandalaSpeed: this.mandalaSpeed,\n            tileSize: this.tileSize,\n            tileShiftAmplitude: this.tileShiftAmplitude,\n            shellRidgeRings: this.shellRidgeRings,\n            shellRidgeDistortion: this.shellRidgeDistortion\n        };\n    }\n    \n    renderInterferencePattern(ctx, time) {\n        const width = ctx.canvas.width;\n        const height = ctx.canvas.height;\n        \n        // Create image data for pixel manipulation\n        const imageData = ctx.createImageData(width, height);\n        const data = imageData.data;\n        \n        // Get current theme colors\n        const color1 = this.colors.primary;\n        const color2 = this.colors.secondary;\n        \n        // Interference pattern parameters (dynamic)\n        const sources = [];\n        for (let i = 0; i < this.sourceCount; i++) {\n            const angle = (i / this.sourceCount) * Math.PI * 2;\n            const radius = Math.min(width, height) * 0.3;\n            const x = width * 0.5 + Math.cos(angle) * radius;\n            const y = height * 0.5 + Math.sin(angle) * radius;\n            sources.push({ x, y });\n        }\n        \n        const wavelength = this.wavelength;\n        const amplitude = 1.0;\n        const frequency = 0.02;\n        \n        // Render interference pattern\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const index = (y * width + x) * 4;\n                \n                // Calculate wave interference\n                let totalWave = 0;\n                for (const source of sources) {\n                    const dx = x - source.x;\n                    const dy = y - source.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    const wave = Math.sin(distance * frequency + time * this.speed * 100) * amplitude;\n                    totalWave += wave;\n                }\n                \n                // Normalize wave value\n                const normalizedWave = (totalWave + sources.length) / (sources.length * 2);\n                \n                // Interpolate between colors\n                const r = Math.round(color1[0] * normalizedWave + color2[0] * (1 - normalizedWave));\n                const g = Math.round(color1[1] * normalizedWave + color2[1] * (1 - normalizedWave));\n                const b = Math.round(color1[2] * normalizedWave + color2[2] * (1 - normalizedWave));\n                \n                data[index] = r;\n                data[index + 1] = g;\n                data[index + 2] = b;\n                data[index + 3] = 255; // Alpha\n            }\n        }\n        \n        // Put image data back to canvas\n        ctx.putImageData(imageData, 0, 0);\n    }\n    \n    drawLogoBackground() {\n        // Draw the black outline background\n        this.ctx.fillStyle = '#000000';\n        \n        // Position and scale the background\n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        const scale = Math.min(width / SVG_CONFIG.width, height / SVG_CONFIG.height) * 0.7;\n        \n        this.ctx.save();\n        this.ctx.translate(width / 2, height / 2);\n        this.ctx.scale(scale, scale);\n        this.ctx.translate(-SVG_CONFIG.width / 2, -SVG_CONFIG.height / 2);\n        \n        // Draw the background path (black outline)\n        this.ctx.fill(this.backgroundPath2D);\n        this.ctx.restore();\n    }\n    \n    applySVGMask(canvas) {\n        const ctx = canvas.getContext('2d');\n        const width = canvas.width;\n        const height = canvas.height;\n        \n        // Create a temporary canvas for the mask\n        const maskCanvas = document.createElement('canvas');\n        maskCanvas.width = width;\n        maskCanvas.height = height;\n        const maskCtx = maskCanvas.getContext('2d');\n        \n        // Draw SVG letterforms as mask (white fill) - only the inner white shapes\n        maskCtx.fillStyle = '#ffffff';\n        \n        // Position and scale the logo\n        const scale = Math.min(width / SVG_CONFIG.width, height / SVG_CONFIG.height) * 0.7;\n        maskCtx.save();\n        maskCtx.translate(width / 2, height / 2);\n        maskCtx.scale(scale, scale);\n        maskCtx.translate(-SVG_CONFIG.width / 2, -SVG_CONFIG.height / 2);\n        \n        // Draw the letterform path (white shapes inside the black outline)\n        maskCtx.fill(this.logoPath2D);\n        maskCtx.restore();\n        \n        // Apply mask using composite operation\n        ctx.globalCompositeOperation = 'destination-in';\n        ctx.drawImage(maskCanvas, 0, 0);\n        ctx.globalCompositeOperation = 'source-over';\n    }\n    \n    drawFrameInfo(elapsed) {\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        this.ctx.font = '16px Arial';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText(\n            `Frame: ${this.frameCount} | Time: ${elapsed.toFixed(1)}s | Theme: Ocean`,\n            10,\n            25\n        );\n    }\n    \n    /**\n     * Calculate interference pattern complexity based on parameters\n     * @param {Object} params - Pattern parameters\n     * @returns {number} - Complexity score (1-100)\n     */\n    calculateInterferenceComplexity(params = {}) {\n        const { \n            sourceCount = this.sourceCount, \n            wavelength = this.wavelength,\n            threshold = this.threshold,\n            gradientMode = this.gradientMode\n        } = params;\n        \n        // Base complexity starts at 35 (interference patterns are moderately complex)\n        let complexity = 35;\n        \n        // Source count contributes most to complexity (40 points max)\n        const sourceFactor = Math.min(sourceCount / 20, 1); // Normalize to 0-1\n        complexity += sourceFactor * 40;\n        \n        // Wavelength affects complexity inversely (smaller wavelength = more computation)\n        const wavelengthFactor = Math.max(0, 1 - (wavelength / 100)); // Normalize inversely\n        complexity += wavelengthFactor * 15;\n        \n        // Threshold affects edge detail complexity\n        const thresholdFactor = threshold * 5; // Lower threshold = more detail\n        complexity += thresholdFactor;\n        \n        // Gradient mode adds computational complexity\n        if (gradientMode) {\n            complexity += 5;\n        }\n        \n        return Math.min(Math.max(Math.round(complexity), 1), 100);\n    }\n    \n    windowResized() {\n        if (this.canvas) {\n            this.resizeCanvas();\n        }\n    }\n}","/**\n * main-new.js - Onchain Summer Vibes Main Application\n * \n * Entry point for q5.js application with highlight.xyz integration\n * FRESH BUILD: No require statements - ES modules only\n */\n\nimport { Q5App } from './src/core/Q5App-minimal.js';\n\n// Browser-compatible task logging functions\nconst startTask = (taskId) => console.log(`Starting task: ${taskId}`);\nconst completeTask = (taskId, details) => console.log(`Task completed: ${taskId}`, details);\nconst taskError = (taskId, error) => console.error(`Task error: ${taskId}`, error);\n\n// Global application instance and configuration\nlet app = null;\nlet webgpuSupported = false;\n\nconst CONFIG = {\n    canvas: {\n        targetFPS: 60\n    },\n    webgpu: {\n        enabled: true,\n        fallbackTo2D: true\n    },\n    debug: true\n};\n\n// WebGPU detection function\nasync function detectWebGPU() {\n    if (!navigator.gpu) {\n        return false;\n    }\n    \n    try {\n        const adapter = await navigator.gpu.requestAdapter();\n        return adapter !== null;\n    } catch (error) {\n        return false;\n    }\n}\n\n// Error display function\nfunction showError(message) {\n    const errorDiv = document.getElementById('error');\n    if (errorDiv) {\n        errorDiv.style.display = 'block';\n        errorDiv.textContent = message;\n    }\n}\n\n// Initialize application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n    try {\n        await startTask('app-initialization');\n        \n        // Detect WebGPU support\n        webgpuSupported = await detectWebGPU();\n        console.log('WebGPU supported:', webgpuSupported);\n        \n        // Hide loading indicator\n        const loadingDiv = document.getElementById('loading');\n        if (loadingDiv) {\n            loadingDiv.style.display = 'none';\n        }\n        \n        // Initialize Q5App\n        app = new Q5App(CONFIG);\n        await app.initialize();\n        \n        await completeTask('app-initialization', 'Q5App initialized successfully');\n        \n    } catch (error) {\n        await taskError('app-initialization', error);\n        \n        // Hide loading and show error\n        const loadingDiv = document.getElementById('loading');\n        if (loadingDiv) {\n            loadingDiv.style.display = 'none';\n        }\n        \n        showError('Application setup failed: ' + error.message);\n    }\n});\n\n// Window resize handler\nwindow.addEventListener('resize', () => {\n    app?.windowResized();\n});\n\n// Global error handler\nwindow.onerror = function(message, source, lineno, colno, error) {\n    console.error('Global error:', { message, source, lineno, colno, error });\n    return false;\n};\n\n// Export for testing\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = {\n        CONFIG\n    };\n}"],"names":["PATTERN_TYPES","INTERFERENCE","GENTLE","MANDALA","VECTOR_FIELD","SHELL_RIDGE","DEFAULT_VALUES","wavelength","speed","threshold","gradientMode","sourceCount","lineDensity","mandalaComplexity","mandalaSpeed","tileSize","tileShiftAmplitude","shellRidgeRings","shellRidgeDistortion","strokeEnabled","strokeWidth","strokeColor","colors","color1","color2","color3","color4","VECTOR_FIELD_CONFIG","THEME_PRESETS","dawn","ocean","forest","sunset","midnight","SVG_CONFIG","PatternControls","constructor","app","this","element","currentPattern","controls","initializeUI","bindEvents","document","createElement","className","createPatternSelector","createParameterControls","applyStyles","updateControlsVisibility","selectorContainer","type","label","emoji","CONTOUR_INTERFERENCE","forEach","pattern","button","innerHTML","dataset","title","classList","add","addEventListener","selectPattern","appendChild","controlsContainer","key","min","max","step","patterns","def","control","createControl","definition","input","querySelector","valueDisplay","controlDiv","parameter","textContent","inputContainer","value","e","parseFloat","target","updateParameter","checked","style","head","patternType","querySelectorAll","toggle","Object","entries","isVisible","includes","update","getParameter","undefined","getState","parameters","fromEntries","map","getElement","destroy","remove","ThemeControls","colorInputs","currentColors","createThemePresets","createColorPickers","presetsContainer","presetsLabel","presetsGrid","preset","preview","background","applyThemePreset","pickersContainer","pickersLabel","pickersGrid","position","colorDef","colorControl","colorInput","colorValue","updateColor","presetKey","color","colorKey","appColors","ControlPanel","isOpen","panel","toggleButton","backdrop","patternControls","themeControls","createToggleButton","createBackdrop","createMainPanel","createSubComponents","id","display","setAttribute","header","content","body","getElementById","patternSection","patternHeader","themeSection","themeHeader","open","close","updateControls","removeEventListener","GentlePattern","name","render","ctx","time","width","height","options","fillStyle","fillRect","stepSize","Math","ceil","numHorizontalLines","i","yPos","amplitude","sin","frequency","speedOffset","thickness","opacity","abs","beginPath","lineWidth","strokeStyle","primary","firstPoint","x","y","moveTo","lineTo","stroke","numVerticalLines","xPos","cos","secondary","numDiagonalLines","offset","phase","accent","steps","j","progress","calculateComplexity","params","complexity","round","MandalaPattern","animatedTime","centerX","centerY","baseRadius","centerIntensity","centerSize","arc","PI","fill","layer","radius","points","angle","breathingFactor","intensityPhase","size","rect","closePath","secondaryRadius","x2","y2","secondaryIntensity","secondaryOpacity","secondarySize","numConnections","floor","radius1","radius2","x1","y1","lineIntensity","lineOpacity","ring","ringRadius","ringPoints","breathingOffset","dotIntensity","dotOpacity","dotSize","Line","age","lifespan","baseColor","r","g","b","reset","random","distance","colorT","vectorField","vector","push","length","shift","magnitude","sqrt","draw","VectorFieldPattern","lines","initialized","noise","z","getTileOffset","t","tileX","tileY","offsetX","offsetY","initializeLines","adjustedX","adjustedY","nx","ny","n","cx","cy","mask","atan2","line","ShellRidgePattern","a","textureRadius","tx","ty","textureOpacity","Q5App","config","canvas","targetFPS","debug","frameCount","startTime","Date","now","logoPath2D","backgroundPath2D","controlPanel","hexToRgb","initialize","Error","resizeCanvas","getContext","createLogoPath","initializeControls","startAnimation","error","Path2D","halfWidth","halfHeight","hasOwnProperty","rgbToHex","hex","result","exec","parseInt","rgb","toString","slice","viewportWidth","window","innerWidth","viewportHeight","innerHeight","canvasWidth","canvasHeight","animate","requestAnimationFrame","elapsed","patternCanvas","patternCtx","renderPattern","applySVGMask","drawLogoBackground","drawImage","drawFrameInfo","getPatternOptions","renderInterferencePattern","imageData","createImageData","data","sources","index","totalWave","source","dx","dy","normalizedWave","putImageData","scale","save","translate","restore","maskCanvas","maskCtx","globalCompositeOperation","font","textAlign","fillText","toFixed","calculateInterferenceComplexity","windowResized","webgpuSupported","CONFIG","webgpu","enabled","fallbackTo2D","async","startTask","navigator","gpu","requestAdapter","detectWebGPU","loadingDiv","completeTask","taskError","message","errorDiv","showError","onerror","lineno","colno","module","exports"],"sourceRoot":""}